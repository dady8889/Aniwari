@using Aniwari.BL.Interfaces;
@using Aniwari.BL.Services;
@using Aniwari.BL.Repositories;
@using Aniwari.DAL.Schedule;
@using Aniwari.DAL.Storage;
@using Aniwari.Schedule;

@page "/schedule"

@inherits DisposableComponentBase

@inject ISettingsService SettingsService
@inject IScheduleService ScheduleService
@inject IAnimeRepository AnimeRepository
@inject IJSRuntime JS

<div class="aniwari-content schedule">
    @foreach (DayOfWeek day in Enum.GetValues<DayOfWeek>())
    {
        if (!dict.ContainsKey(day))
            continue;

        bool hasAnime = dict[day].Count > 0;

        <div class="aniwari-card schedule-day @(day.ToString().ToLower()) @(hasAnime ? "" : "noanime")">
            <div class="schedule-header">
                <div class="schedule-date">
                    <div class="schedule-date__relative-name">
                        @dateMap[day].RelativeName
                    </div>
                    <div class="schedule-date__date">
                        @dateMap[day].Date.ToString("MMM dd")
                    </div>
                </div>
                <div class="schedule-header__title">
                    @day.ToString()
                </div>
            </div>

            @if (hasAnime)
            {
                <hr>

                List<AnimeSchedule> animes = new();

                if (SettingsService.GetStore().PreferredTime == PreferredTime.JST)
                {
                    animes = dict[day].OrderBy(x => x.JSTAirTime).ToList();
                }
                else if (SettingsService.GetStore().PreferredTime == PreferredTime.Local)
                {
                    animes = dict[day].OrderBy(x => x.LocalAirTime).ToList();
                }

                <div class="schedule-day__body">
                    @foreach (var anime in animes)
                    {
                        <AnimeRow @key="@anime.MalId" Anime="@anime" />
                    }
                </div>
            }
            else
            {
                <div class="schedule-header__noanime">
                    No anime airs on this day
                </div>
            }
        </div>
    }

</div>

@code {
    private IJSObjectReference? module;
    private Dictionary<DayOfWeek, List<AnimeSchedule>> dict = new();
    private Dictionary<DayOfWeek, WeekdayDate> dateMap = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var today = DateTime.Now.DayOfWeek;

        foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
        {
            dict.Add(day, new List<AnimeSchedule>());

            // the current day is today
            if (today == day)
            {
                dateMap.Add(day, new WeekdayDate("Today", DateOnly.FromDateTime(DateTime.Now)));
            }
            else
            {
                var dateDiff = day - today;
                dateMap.Add(day, new WeekdayDate("", DateOnly.FromDateTime(DateTime.Now.AddDays(dateDiff))));
            }
        }

        module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Schedule.razor.js");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await foreach (var list in ScheduleService.GetSchedule(CancellationTokenSource.Token))
            {
                foreach (var anime in list)
                {
                    // add to the dictionary per day
                    if (SettingsService.GetStore().PreferredTime == PreferredTime.JST)
                    {
                        dict[anime.JSTScheduleDay].Add(anime);
                    }
                    else if (SettingsService.GetStore().PreferredTime == PreferredTime.Local)
                    {
                        dict[anime.LocalScheduleDay].Add(anime);
                    }
                    

                    // update the local store
                    AnimeRepository.AddAnime(anime);
                }

                StateHasChanged();
            }

            if (module != null && !Disposed)
            {
                await module.InvokeVoidAsync("scrollToDay", CancellationTokenSource.Token, DateTime.Now.DayOfWeek.ToString());
            }

            // if the store needed updates, save to disk
            await SettingsService.SaveAsync();

        }
    }

    private record WeekdayDate(string RelativeName = "", DateOnly Date = default);
}
