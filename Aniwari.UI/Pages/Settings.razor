@using Aniwari.BL.Interfaces;
@using Aniwari.DAL.Constants;
@using Aniwari.DAL.Storage;
@using Aniwari.Managers;
@using Aniwari.Platforms;
@using Aniwari.Settings;
@using System.Reflection;

@page "/settings"

@inject IJSRuntime JS
@inject IMyAnimeListService MyAnimeListService
@inject ISettingsService SettingsService
@inject ITorrentService TorrentService
@inject IFolderPicker FolderPicker
@inject IFilePicker FilePicker
@inject IThemeManager Theme
@inject IToastManager Toast
@inject IUpdateService UpdateService

@if (Store == null) return;

<link href="css/responsive/Settings.css" rel="stylesheet" />

<div class="aniwari-content settings">
    @foreach (var (categoryName, category) in SettingsService.GetStore().GetCategories())
    {
        <div class="category">
            @categoryName
        </div>

        <div class="aniwari-card">
            @foreach (var setting in category.Settings)
            {
                var propertyName = setting.Name;

                <div @key="propertyName" class="settings-item">
                    <div class="settings-item__description">
                        @setting.Description
                    </div>
                    <div class="settings-item__control">
                        @if (propertyName == nameof(SettingsStore.ThemeColor))
                        {
                            <div class="button-wrapper">
                                <div class="accent-preview" title="Accent color">
                                </div>
                                <input type="color" value="@(Store.Get<string>(propertyName))"
                           @oninput="(e) => OnThemeColorChanged(e, propertyName, setting, false)"
                           @onchange="(e) => OnThemeColorChanged(e, propertyName, setting, true)" />

                                <Button OnClick="OnThemeResetClicked">
                                    Reset
                                </Button>
                            </div>
                        }
                        else if (propertyName == nameof(SettingsStore.EnableDarkMode))
                        {
                            <div class="button-wrapper">
                                <SettingCheckbox IsChecked="Store.EnableDarkMode" OnChange="OnDarkModeChanged" />
                            </div>
                        }
                        else if (propertyName == nameof(SettingsStore.ArchivePath))
                        {
                            <div class="button-wrapper">

                                <div>
                                    @(EllipsePath(Store.Get<string>(propertyName) ?? ""))
                                </div>

                                <Button OnClick="OnArchivePathBrowse">
                                    Browse
                                </Button>

                                <Button OnClick="() => SetDefault(propertyName, setting)">
                                    Reset
                                </Button>
                            </div>
                        }
                        else if (propertyName == nameof(SettingsStore.MaximumSeedRatio))
                        {
                            <div class="button-wrapper">
                                <SettingSpinner title="-1 = Unlimited" MinValue="-1" Step="0.1m" TValue="decimal" Value="@(Store.Get<decimal>(propertyName))" OnChange="async (e) => {
                                var value = ClampUnlimited(e.Old, e.New);
                                if (value == null) return;
                                Store.Set<decimal>(propertyName, value.Value);
                                await SettingsService.SaveAsync();
                                e.Handled = true;
                            }" />

                                <Button OnClick="() => SetDefault(propertyName, setting)">
                                    Reset
                                </Button>
                            </div>
                        }
                        else if (propertyName == nameof(SettingsStore.MaximumDownloadSpeed) || propertyName == nameof(SettingsStore.MaximumUploadSpeed))
                        {
                            <div class="button-wrapper">
                                <SettingSpinner title="-1 = Unlimited" MinValue="-1" Step="1000" TValue="int" Value="@(Store.Get<int>(propertyName))" OnChange="async (e) => {
                                var value = ClampUnlimited(e.Old, e.New);
                                if (value == null) return;
                                Store.Set<int>(propertyName, value.Value);
                                await SettingsService.SaveAsync();
                                await TorrentService.ApplySettings();
                                e.Handled = true;
                            }" />
                                <label>
                                    kB/s
                                </label>

                                <Button OnClick="() => SetDefault(propertyName, setting)">
                                    Reset
                                </Button>
                            </div>
                        }
                        else if (propertyName == nameof(SettingsStore.PreferredTime))
                        {
                            <div class="button-wrapper">
                                <SettingSelect TValue="PreferredTime" Value="@(Store.Get<PreferredTime>(propertyName))" OnChange="async (value) => {
                                    Store.Set(setting.Type, propertyName, value);
                                    await SettingsService.SaveAsync();
                            }" />

                                <Button OnClick="() => SetDefault(propertyName, setting)">
                                    Reset
                                </Button>
                            </div>
                        }
                        else if (propertyName == nameof(SettingsStore.PreferredTitleLanguage))
                        {
                            <div class="button-wrapper">
                                <SettingSelect TValue="PreferredTitleLanguage" Value="@(Store.Get<PreferredTitleLanguage>(propertyName))" OnChange="async (value) => {
                                    Store.Set(setting.Type, propertyName, value);
                                    await SettingsService.SaveAsync();
                            }" />

                                <Button OnClick="() => SetDefault(propertyName, setting)">
                                    Reset
                                </Button>
                            </div>
                        }
                        else if (propertyName == nameof(SettingsStore.BackgroundFile))
                        {
                            <div class="button-wrapper">
                                <Button OnClick="OnBackgroundFileSelect">
                                    Select
                                </Button>

                                @if (Store.BackgroundFile != null)
                                {
                                    <Button OnClick="OnBackgroundFileReset">
                                        Delete
                                    </Button>
                                }
                            </div>
                        }
                        else if (setting.Type == typeof(bool))
                        {
                            <div class="button-wrapper">
                                <SettingCheckbox IsChecked="@(Store.Get<bool>(propertyName))" OnChange="async (value) => {
                                    Store.Set<bool>(propertyName, value);
                                    await SettingsService.SaveAsync();
                                }" />
                            </div>
                        }
                        else if (setting.Type == typeof(decimal))
                        {
                            <div class="button-wrapper">
                                <SettingSpinner TValue="decimal" Value="@(Store.Get<decimal>(propertyName))" OnChange="async (e) => {
                                    if (e.New == null) return;
                                    Store.Set<decimal>(propertyName, e.New.Value);
                                    await SettingsService.SaveAsync();
                                }" />

                                <Button OnClick="() => SetDefault(propertyName, setting)">
                                    Reset
                                </Button>
                            </div>
                        }
                    </div>
                </div>

                @if (setting != category.Settings.Last())
                {
                    <hr />
                }
            }
        </div>
    }

    <div class="category">
        Other
    </div>

    <div class="aniwari-card">
        <div class="settings-item">
            <div class="settings-item__description">
                MyAnimeList integration
            </div>
            <div class="settings-item__control">
                @if (!Store!.UsesMAL)
                {
                    <Button OnClick="OnMyAnimeListLoginClicked">
                        Connect
                    </Button>
                }
                else
                {
                    <Button OnClick="OnMyAnimeListImportWatchingClicked">
                        Import watchlist
                    </Button>
                    <Button OnClick="OnMyAnimeListLoginClicked">
                        Refresh
                    </Button>
                    <Button OnClick="OnMyAnimeListLogoutClicked">
                        Disconnect
                    </Button>
                }
            </div>
        </div>

        <hr />

        <div class="settings-item">
            <div class="settings-item__description">
                Delete watchlist
            </div>
            <div class="settings-item__control">
                <Button OnClick="OnDeleteWatchlistClicked">
                    Delete
                </Button>
            </div>
        </div>

        <hr />

        <div class="settings-item">
            <div class="settings-item__description">
                Set default settings
            </div>
            <div class="settings-item__control">
                <Button OnClick="OnRestoreClicked">
                    Restore
                </Button>
            </div>
        </div>
    </div>

    <div class="category">
        About
    </div>

    <div class="aniwari-card">
        <div class="settings-item">
            <div class="settings-item__description">
                GitHub project link
            </div>
            <div class="settings-item__control">
                <Button OnClick="@(() => {
                    using System.Diagnostics.Process process = new()
                    {
                        StartInfo = new("https://github.com/dady8889/Aniwari")
                        {
                            UseShellExecute = true
                        }
                    };

                    process.Start();
                })">
                    Open
                </Button>
            </div>
        </div>

        <hr />

        <div class="settings-item">
            <div class="settings-item__description">
                Version
            </div>
            <div class="settings-item__control">
                @System.Reflection.Assembly.GetExecutingAssembly().GetName().Version?.ToString(3)
            </div>
        </div>

        <hr />

        @if (updateAvailable)
        {
            <div class="settings-item">
                <div class="settings-item__description">
                    New version @newVersion
                </div>

                @if (installing)
                {
                    @(updateProgress + " %")
                }

                <div class="settings-item__control">
                    <Button OnClick="OnInstallUpdateClicked">
                        Install
                    </Button>
                </div>
            </div>
        }
        else
        {
            <div class="settings-item">
                <div class="settings-item__description">
                    Check for updates
                </div>
                <div class="settings-item__control">
                    <Button OnClick="OnCheckUpdateClicked">
                        Check
                    </Button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private SettingsStore Store = null!;

    private bool updateAvailable = false;
    private string newVersion = string.Empty;
    private bool installing = false;
    private int updateProgress = 0;

    #region Helper methods

    private string EllipsePath(string path)
    {
        const int maxSize = 50;

        if (path.Length > maxSize)
        {
            List<string> split = path.Split('\\').ToList();
            string str = path;

            while (str.Length > maxSize && split.Count > 2)
            {
                int mid = split.Count / 2;
                split.RemoveRange(mid, 2);
                split.Insert(mid, "...");
                str = string.Join("\\", split);
            }

            return str;
        }

        return path;
    }

    private Nullable<T> ClampUnlimited<T>(Nullable<T> previous, Nullable<T> current) where T : struct, System.Numerics.INumber<T>
    {
        if (previous <= -T.One && current > -T.One)
            return T.Zero;

        else if (previous >= T.Zero && current < T.Zero)
            return -T.One;

        return current;
    }

    private async Task SetDefault(string propertyName, Setting setting)
    {
        Store.Set(setting.Type, propertyName, setting.DefaultValue);
        await SettingsService.SaveAsync();
    }

    #endregion

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Store = SettingsService.GetStore();
    }

    #region Theming

    private async Task OnThemeColorChanged(ChangeEventArgs args, string propertyName, Setting setting, bool save)
    {
        string color = (string?)args.Value ?? ThemeColors.LightColor;
        Store.Set(propertyName, color);
        await Theme.SetThemeColor(JS);

        if (save)
            await SettingsService.SaveAsync();
    }

    private async Task OnThemeResetClicked()
    {
        Store.ThemeColor = ThemeColors.LightColor;
        await Theme.SetThemeColor(JS);
        await SettingsService.SaveAsync();
    }

    private async Task OnDarkModeChanged(bool value)
    {
        Store.EnableDarkMode = value;

        await Theme.SetThemeColor(JS);
        await SettingsService.SaveAsync();
    }

    private async Task OnBackgroundFileSelect()
    {
        var file = await FilePicker.PickFile(new[] { ".png", ".jpeg", ".jpg" });
        if (file != null && File.Exists(file))
        {
            if (Store.BackgroundFile != null)
            {
                var previousFilePath = Path.Combine(Paths.AppDataPath, Store.BackgroundFile);
                if (File.Exists(previousFilePath))
                    File.Delete(previousFilePath);
            }

            var fileName = Path.GetFileName(file);
            var backgroundFilePath = Path.Combine(Paths.AppDataPath, fileName);
            Store.BackgroundFile = fileName;
            File.Copy(file, backgroundFilePath, true);
            await SettingsService.SaveAsync();

            await Theme.SetMainBackground(JS);
        }
    }

    private async Task OnBackgroundFileReset()
    {
        if (Store.BackgroundFile != null)
        {
            var backgroundFilePath = Path.Combine(Paths.AppDataPath, Store.BackgroundFile);

            if (File.Exists(backgroundFilePath))
                File.Delete(backgroundFilePath);
        }

        Store.BackgroundFile = (string?)Store.GetSettings()[nameof(SettingsStore.BackgroundFile)].DefaultValue;
        await SettingsService.SaveAsync();

        await Theme.SetMainBackground(JS);
    }

    #endregion

    private async Task OnArchivePathBrowse()
    {
        var folder = await FolderPicker.PickFolder();
        if (folder != null)
        {
            Store.Set(nameof(SettingsStore.ArchivePath), folder);
            await SettingsService.SaveAsync();
        }
    }

    private async Task OnRestoreClicked()
    {
        foreach (var (propertyName, setting) in SettingsService.GetStore().GetSettings())
        {
            Store.Set(setting.Type, propertyName, setting.DefaultValue);
            if (propertyName == nameof(SettingsStore.ThemeColor))
            {
                await Theme.SetThemeColor(JS);
            }
        }

        await SettingsService.SaveAsync();

        Toast.Show(ToastType.Success, "Default settings have been restored.");
    }

    private async Task OnDeleteWatchlistClicked()
    {
        Store.Animes.Clear();
        await SettingsService.SaveAsync();

        Toast.Show(ToastType.Success, "Your watchlist has been deleted.");
    }

    #region MyAnimeList

    private async Task OnMyAnimeListLoginClicked()
    {
        var page = new MALPage();

        page.PageClosed += async (sender, e) =>
        {
            Store.MalCsrfToken = e.CsrfToken;
            Store.MalSessionId = e.MalSessionId;
            Store.MalUsername = e.Username;
            await InvokeAsync(StateHasChanged);

            if (!Store.UsesMAL)
                Toast.Show(ToastType.Error, "Your MyAnimeList data could not be found.");
            else
                Toast.Show(ToastType.Success, "Connected to MyAnimeList.");
        };

        if (App.Current?.MainPage != null)
            await App.Current.MainPage.Navigation.PushModalAsync(page);
    }

    private async Task OnMyAnimeListLogoutClicked()
    {
        var page = new MALPage()
            {
                DeleteCookies = true
            };

        page.PageClosed += (sender, e) =>
        {
            Toast.Show(ToastType.Success, "You were logged out from MyAnimeList.");
        };

        Store.MalCsrfToken = null;
        Store.MalSessionId = null;
        Store.MalUsername = null;

        if (App.Current?.MainPage != null)
            await App.Current.MainPage.Navigation.PushModalAsync(page);
    }

    private async Task OnMyAnimeListImportWatchingClicked()
    {
        Toast.Show(ToastType.Info, "Started importing anime from your MyAnimeList.");

        try
        {
            await MyAnimeListService.ImportList();
            Toast.Show(ToastType.Success, "Import from MyAnimeList has been finished.");
        }
        catch (Exception ex)
        {
            Toast.Show(ToastType.Error, $"Import from MyAnimeList ended with error. {ex.Message}");
        }
    }

    #endregion

    private async Task OnCheckUpdateClicked()
    {
        try
        {
            var update = await UpdateService.CanUpdate(Assembly.GetExecutingAssembly());

            updateAvailable = update.CanUpdate;

            if (updateAvailable)
            {
                newVersion = update.NewestVersion.ToString(3);
            }
            else
            {
                Toast.Show(ToastType.Info, "You have the latest version.");
            }
        }
        catch (Exception)
        {
            Toast.Show(ToastType.Error, "Could not find updates.");
        }
    }

    private async Task OnInstallUpdateClicked()
    {
        try
        {
            var progress = new Progress<double>(async (percent) =>
            {
                var intPercent = (int)(percent * 100);
                if (intPercent != updateProgress)
                {
                    updateProgress = intPercent;
                    await InvokeAsync(StateHasChanged);
                }
            });

            installing = true;

            await UpdateService.Update(Assembly.GetExecutingAssembly(), progress);

            Application.Current?.Quit();
        }
        catch (Exception)
        {
            Toast.Show(ToastType.Error, "Could not install the newest version.");
        }
    }
}
