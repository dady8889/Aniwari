@using Aniwari.BL.Interfaces;
@using Aniwari.BL.Repositories;
@using Aniwari.BL.Services;
@using Aniwari.DAL.Storage;
@using Aniwari.Watchlist;

@page "/watchlist"

@inject IJSRuntime JS

@inject ISettingsService SettingsService
@inject IAnimeRepository AnimeRepository

@inherits ReactiveComponentBase

@if (Store == null) return;

<link href="css/responsive/Watchlist.css" rel="stylesheet" />

<div class="aniwari-content watchlist">

    <Animate IsVisible="false" @ref="animateTorrentPicker">
        <TorrentPicker Anime="selectedAnime" Episode="selectedEpisode" OnTorrentSelected="OnTorrentSelected" />
    </Animate>

    <Animate @ref="animateWatchlist">
        <div class="aniwari-card animate-fade">
            @{
                var lastAnime = watchingAnime.LastOrDefault();
            }

            @if (lastAnime == null)
            {
                <div class="aniwari-list-item watchlist-item noanime">You are not watching any anime</div>
            }
            else
            {
                foreach (var anime in watchingAnime)
                {
                    <WatchlistItem Anime="anime" OnSearch="SearchAnime" />

                    if (anime != lastAnime)
                    {
                        <hr>
                    }
                }
            }
        </div>
    </Animate>
</div>

@code {
    private Animate? animateWatchlist;
    private Animate? animateTorrentPicker;

    private SettingsStore? Store;
    private List<Anime> watchingAnime = new();
    private int savedScroll = 0;
    private Anime? selectedAnime;
    private int? selectedEpisode;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Store = SettingsService.GetStore();
        watchingAnime = Store.Animes.Where(x => x.Watching).ToList();
    }

    private async Task SearchAnime(WatchlistItem.SearchEventArgs args)
    {
        savedScroll = (int)((await JS.InvokeAsync<double?>("getDocumentScrollTop")) ?? 0.0);

        await animateWatchlist!.Hide();
        await animateTorrentPicker!.Show();

        selectedAnime = args.Anime;
        selectedEpisode = args.Episode;
    }

    private async Task OnTorrentSelected(TorrentPicker.TorrentSelectedEventArgs args)
    {
        await animateTorrentPicker!.Hide();
        await animateWatchlist!.Show();

        await JS.InvokeVoidAsync("setDocumentScrollTop", savedScroll, true);
        savedScroll = 0;

        if (!args.Canceled)
        {
            AnimeRepository.AddEpisode(args.Anime, new Episode()
                {
                    Id = args.Episode,
                    AnimeId = args.Anime.Id,
                    TorrentMagnet = args.Magnet,
                    TorrentTitle = args.Title,
                });

            await SettingsService.SaveAsync();
        }

        selectedAnime = null;
        selectedEpisode = null;
    }
}