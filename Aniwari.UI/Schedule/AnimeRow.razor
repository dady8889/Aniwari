@using Aniwari.BL.Interfaces;
@using Aniwari.BL.Messaging;
@using Aniwari.BL.Repositories;
@using Aniwari.BL.Services;
@using Aniwari.DAL.Schedule;
@using Aniwari.DAL.Storage;
@using Aniwari.DAL.Interfaces;
@using Aniwari.Shared;

@inherits ReactiveComponentBase

@inject ISettingsService SettingsService
@inject IAnimeRepository AnimeRepository

@if (Anime == null) return;

<Accordion>
    <AccordionHeader>
        <div class="aniwari-list-item schedule-item @(watching ? "watching" : "") @(context.Expanded ? "expanded" : "")">
            <div class="schedule-item__time" title="@Anime.RawAirTime">
                @if (SettingsService.GetStore().PreferredTime == PreferredTime.JST)
                {
                    @(Anime.JSTAirTime == null ? "??:??" : Anime.JSTAirTime.Value.ToString("HH:mm"))
                }
                else if (SettingsService.GetStore().PreferredTime == PreferredTime.Local)
                {
                    @(Anime.LocalAirTime == null ? "??:??" : Anime.LocalAirTime.Value.ToString("HH:mm"))
                }
            </div>
            <div class="schedule-item__watch">
                <WatchButton Anime="Anime" />
            </div>
            <div class="schedule-item__title">
                @if (SettingsService.GetStore().PreferredTitleLanguage == PreferredTitleLanguage.Romanized)
                {
                    @(((ITitle)Anime).GetDefaultTitle())
                }
                else if (SettingsService.GetStore().PreferredTitleLanguage == PreferredTitleLanguage.English)
                {
                    @(((ITitle)Anime).GetTitle(TitleType.English) ?? ((ITitle)Anime).GetDefaultTitle())
                }
                else if (SettingsService.GetStore().PreferredTitleLanguage == PreferredTitleLanguage.Japanese)
                {
                    @(((ITitle)Anime).GetTitle(TitleType.Japanese) ?? ((ITitle)Anime).GetDefaultTitle())
                }
            </div>
        </div>
    </AccordionHeader>
    <AccordionBody>
        <div class="aniwari-list-detail schedule-item-detail @(watching ? "watching" : "")">
            <img class="schedule-item-detail__img" src="@Anime.Image" />
            <div class="schedule-item-detail__info">

                <div class="schedule-item-detail__group">
                    <div class="schedule-item-detail__label">
                        Known as
                    </div>
                    <div class="schedule-item-detail__text">
                        @string.Join("; ", Anime.Titles.SelectMany(x => x.Value).ToArray())
                    </div>
                </div>

                <div class="schedule-item-detail__group">
                    <div class="schedule-item-detail__label">
                        Link to MAL
                    </div>
                    <div class="schedule-item-detail__text text-break">
                        <a href="@Anime.Url">@Anime.Url</a>
                    </div>
                </div>

                <div class="schedule-item-detail__group">
                    <div class="schedule-item-detail__label">
                        Synopsis
                    </div>
                    <div class="schedule-item-detail__text">
                        @(string.IsNullOrEmpty(Anime.Synopsis) ? "No synopsis is written" : Anime.Synopsis)
                    </div>
                </div>
            </div>
        </div>
    </AccordionBody>
</Accordion>

@code {
    [Parameter] public AnimeSchedule? Anime { get; set; }

    private bool watching = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (!Disposed)
        {
            ReactTo<AnimeWatchingChanged>(x =>
            {
                if (Anime == null || x.Anime.Id != Anime.MalId)
                    return;

                watching = AnimeRepository.GetAnimeWatching(Anime.MalId);
                StateHasChanged();
            });
        }

        if (Anime != null)
        {
            watching = AnimeRepository.GetAnimeWatching(Anime.MalId);
        }
    }
}
