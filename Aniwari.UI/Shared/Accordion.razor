@inject IJSRuntime JS

<div class="aniwari-accordion">
    <div class="aniwari-accordion__header" @onclick="OnHeaderClicked">
        @if (AccordionHeader != null)
        {
            @AccordionHeader(this)
        }
    </div>

    <div @ref="bodyReference" class="aniwari-accordion__body @(expandedClass)">
        @if (AccordionBody != null && Expanded)
        {
            @AccordionBody(this)
        }
    </div>
</div>

@code {
    [Parameter] public RenderFragment<Accordion>? AccordionHeader { get; set; }
    [Parameter] public RenderFragment<Accordion>? AccordionBody { get; set; }
    [Parameter] public bool PreventExpanding { get; set; } = false;

    private ElementReference bodyReference;
    private IJSObjectReference? module;
    private string expandedClass => Expanded ? "expanded" : "";

    public bool Expanded { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        module = await JS.InvokeAsync<IJSObjectReference>("import", "./Shared/Accordion.razor.js");
    }

    private async Task OnHeaderClicked()
    {
        if (PreventExpanding)
            return;

        await Toggle();
    }

    public async Task Close()
    {
        if (Expanded)
            await Toggle();
    }

    public async Task Open()
    {
        if (!Expanded)
            await Toggle();
    }

    public async Task Toggle()
    {
        if (module == null)
            throw new Exception("Unable to call JS.");

        bool expanded = !Expanded;

        if (expanded)
        {
            Expanded = !Expanded;
            StateHasChanged();
            await Task.Delay(50);
        }

        await module.InvokeVoidAsync("toggleDetails", bodyReference, expanded);

        if (!expanded)
        {
            await Task.Delay(300);
            Expanded = expanded;
        }
    }
}
