@inject IJSRuntime JS
@inject NavigationManager Navigation

<nav @ref="navReference">
    <div class="nav-item-wrapper">
        <div class="nav-item">
            <CustomNavLink href="schedule" @onclick="@(() => OnNavLinkClicked("schedule"))">
                <i class="nav-item__icon bi bi-calendar3"></i> Schedule
            </CustomNavLink>
        </div>
        <div class="nav-item">
            <CustomNavLink href="watchlist" @onclick="@(() => OnNavLinkClicked("watchlist"))">
                <i class="nav-item__icon bi bi-list-ul"></i> Watchlist
            </CustomNavLink>
        </div>
        <div class="nav-item">
            <CustomNavLink href="settings" @onclick="@(() => OnNavLinkClicked("settings"))">
                <i class="nav-item__icon bi bi-gear-fill"></i> Settings
            </CustomNavLink>
        </div>
    </div>
</nav>

@code {

    [Parameter] public Animate? Animator { get; set; }

    private IJSObjectReference? module;
    private ElementReference navReference;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        module = await JS.InvokeAsync<IJSObjectReference>("import", "./Shared/NavMenu.razor.js");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (module != null)
            await module.InvokeVoidAsync("animateActiveNav", navReference);
    }

    private async Task OnNavLinkClicked(string page)
    {
        if (Animator != null)
        {
            await Animator.Hide();
            Navigation.NavigateTo(page);
            await Animator.Show();
        }
        else
            Navigation.NavigateTo(page);
    }
}
