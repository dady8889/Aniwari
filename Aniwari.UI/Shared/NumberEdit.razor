@inject IJSRuntime JS

<div @ref="input" @attributes="AdditionalAttributes" contenteditable="true">
    @(Content)
</div>

@code {
    private ElementReference input;

    [Parameter] public bool Autofocus { get; set; } = false;
    [Parameter] public string Content { get; set; } = string.Empty;
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JS.InvokeVoidAsync("addKeyPressEventListener", input);
            await JS.InvokeVoidAsync("addPasteEventListener", input);

            if (Autofocus)
            {
                await input.FocusAsync();
                await JS.InvokeVoidAsync("moveCursorToEnd", input);
            }

            // thank you based ChatGPT
        }
    }

    public async Task<string> GetContent()
    {
        return await JS.InvokeAsync<string>("getElementInnerText", input);
    }
}
