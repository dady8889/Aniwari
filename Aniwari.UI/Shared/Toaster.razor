@using Aniwari.BL.Interfaces;
@using Aniwari.BL.Messaging;
@using static Aniwari.Shared.Toast;
@using Aniwari.DAL.Interfaces;
@using Aniwari.Managers;

@inherits ReactiveComponentBase

@inject IToastManager Toast
@inject ITitleManager Title

<div class="toaster">
    @foreach (ToastMessage message in Toast.Messages)
    {
        <Toast @key="@message.Guid" Guid="@message.Guid" Type="@message.Type" Text="@message.Text" Heading="@message.Heading" OnDismiss="OnToastDismissed" />
    }
</div>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Toast.RegisterToaster(this);

        ReactTo<TorrentErrored>((e) =>
        {
            Toast.Show(ToastType.Error, $"Could not download anime {Title.GetPreferredAnimeTitle(e.AnimeId)} episode {e.EpisodeId}. {e.ErrorMessage}");
        });

        ReactTo<TorrentFinished>((e) =>
        {
            Toast.Show(ToastType.Success, $"Finished downloading {Title.GetPreferredAnimeTitle(e.AnimeId)} episode {e.EpisodeId}.");
        });
    }

    private void OnToastDismissed(ToastDismissedEventArgs args)
    {
        var msg = Toast.Messages.FirstOrDefault(x => x.Guid == args.Guid);
        if (msg == null) return;

        Toast.Messages.Remove(msg);
        InvokeAsync(StateHasChanged);
    }

    public void Update()
    {
        InvokeAsync(StateHasChanged);
    }
}
