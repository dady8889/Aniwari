@using Aniwari.BL.Interfaces;
@using Aniwari.BL.Services;
@using Aniwari.DAL.Nyaa;
@using Aniwari.DAL.Storage;
@using System.Text.RegularExpressions;

@inject INyaaService NyaaService

<div class="torrent-picker">
    <Button class="return-button" OnClick="() => OnSelectClicked(null)">
        Return
    </Button>

    <div class="aniwari-card">

        @if (foundTorrents == null || foundTorrents.Count == 0)
        {
            <div class="aniwari-list-item">
                <div class="torrent-picker-item__name">
                    No results found
                </div>
            </div>
        }
        else
        {
            @foreach (var torrent in foundTorrents)
            {
                <div class="aniwari-list-item">

                    <div class="torrent-picker-item__name">
                        @torrent.Name
                    </div>

                    <div class="torrent-info-wrapper">
                        <div class="seeders">
                            @torrent.Seeders
                        </div>
                        <div class="leechers">
                            @torrent.Leechers
                        </div>
                        <Button class="torrent-picker-item__select" OnClick="() => OnSelectClicked(torrent)">
                            Select
                        </Button>
                    </div>

                </div>
            }
        }
    </div>
</div>

@code {
    public record TorrentSelectedEventArgs(AniwariAnime Anime, int Episode, bool Canceled, string Title, string Magnet);

    [Parameter] public AniwariAnime? Anime { get; set; }
    [Parameter] public int? Episode { get; set; }
    [Parameter] public EventCallback<TorrentSelectedEventArgs> OnTorrentSelected { get; set; }

    private List<NyaaAnime>? foundTorrents = null;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var prevAnime = Anime;
        var prevEpisode = Episode;

        await base.SetParametersAsync(parameters);

        if (Anime == null || Episode == null || (Anime == prevAnime && Episode == prevEpisode))
            return;

        string searchString = Anime.SearchString;

        var additionRegex = new Regex(@"@(ep|EP)(?:\+(\d+))?");
        searchString = additionRegex.Replace(searchString, e =>
            {
                int episodeIndex = Episode.Value;
                string replacement = "";
                string numberTypeGroup = e.Groups[1].Value;

                // increment episode index
                if (e.Groups[2].Success)
                {
                    episodeIndex += Convert.ToInt32(e.Groups[2].Value);
                }

                // set episode formatting
                if (numberTypeGroup == "ep")
                {
                    replacement = $"{episodeIndex:D2}";
                }
                else if (numberTypeGroup == "EP")
                {
                    replacement = $"{episodeIndex}";
                }

                return replacement;
            });

        foundTorrents = await NyaaService.GetAnime(searchString);
        StateHasChanged();
    }

    private async Task OnSelectClicked(NyaaAnime? torrent)
    {
        if (OnTorrentSelected.HasDelegate)
        {
            TorrentSelectedEventArgs args;

            if (torrent != null)
            {
                args = new TorrentSelectedEventArgs(Anime!, Episode!.Value, false, torrent.Name, torrent.Magnet);
            }
            else
            {
                args = new TorrentSelectedEventArgs(Anime!, Episode!.Value, true, "", "");
            }

            await OnTorrentSelected.InvokeAsync(args);
        }

        foundTorrents = null;
    }
}