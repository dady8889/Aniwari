@using System.Diagnostics;

@using Aniwari.BL.Interfaces;
@using Aniwari.BL.Messaging;
@using Aniwari.BL.Repositories;
@using Aniwari.BL.Services;
@using Aniwari.DAL.Interfaces;
@using Aniwari.DAL.Jikan;
@using Aniwari.DAL.Storage;
@using Aniwari.DAL.MyAnimeList;

@inherits ReactiveComponentBase

@inject IJSRuntime JS
@inject ISettingsService SettingsService
@inject ITorrentService TorrentService
@inject IAnimeRepository AnimeRepository
@inject IMyAnimeListService MyAnimeListService

@if (Anime == null) return;

<Accordion @key="Anime.Id" PreventExpanding="editingSearchString || editingEpisodesCount">
    <AccordionHeader>
        <div class="aniwari-list-item watchlist-item @(context.Expanded ? "expanded" : "")">
            @if (!editingSearchString)
            {
                <div class="title-wrapper">
                    <div class="title" title="@Anime.SearchString">
                        @if (SettingsService.GetStore().PreferredTitleLanguage == PreferredTitleLanguage.Romanized)
                        {
                            @(((ITitle)Anime).GetDefaultTitle())
                        }
                        else if (SettingsService.GetStore().PreferredTitleLanguage == PreferredTitleLanguage.English)
                        {
                            @(((ITitle)Anime).GetTitle(TitleType.English) ?? ((ITitle)Anime).GetDefaultTitle())
                        }
                        else if (SettingsService.GetStore().PreferredTitleLanguage == PreferredTitleLanguage.Japanese)
                        {
                            @(((ITitle)Anime).GetTitle(TitleType.Japanese) ?? ((ITitle)Anime).GetDefaultTitle())
                        }
                    </div>

                    @if (!editingEpisodesCount)
                    {
                        <button class="title-button" @onclick:stopPropagation="true" @onclick="OnTitleClicked">
                            Edit
                        </button>
                    }
                </div>
            }
            else
            {
                <div class="title-wrapper">
                    <div @ref="searchStringFieldReference" class="searchstring-field" @onclick:stopPropagation="false" contenteditable="true">
                        @Anime.SearchString
                    </div>
                    <div class="button-wrapper">
                        <button class="title-button" @onclick:stopPropagation="true" @onclick="OnSearchStringEditEnded">
                            Save
                        </button>
                        <button class="title-button" @onclick:stopPropagation="true" @onclick="OnSearchStringResetClicked">
                            Reset
                        </button>
                    </div>
                </div>
            }

            <div class="episodes-wrapper">
                @if (editingEpisodesCount)
                {
                    <div class="button-wrapper">
                        <button class="title-button" @onclick:stopPropagation="true" @onclick="OnEpisodeCountResetClicked">
                            Reset
                        </button>
                        <button class="title-button" @onclick:stopPropagation="true" @onclick="OnEpisodeCountEditEnded">
                            Save
                        </button>
                    </div>
                }

                <div class="episodes-counter @(Anime.CustomEpisodesCount != null ? "custom" : "")" @onclick:stopPropagation="true" @onclick="OnEpisodesClicked">
                    <div>
                        @Anime.GetWatchedEpisodes().Count()
                    </div>
                    <div>
                        /
                    </div>
                    @if (editingEpisodesCount)
                    {
                        <NumberEdit @ref="episodesCountFieldReference" Content="@(Anime.CustomEpisodesCount == null ? (Anime.EpisodesCount?.ToString() ?? "?") : Anime.CustomEpisodesCount.ToString())" Autofocus="true" />
                    }
                    else
                    {
                        <div>
                            @(Anime.CustomEpisodesCount == null ? (Anime.EpisodesCount?.ToString() ?? "?") : Anime.CustomEpisodesCount.ToString())
                        </div>
                    }
                </div>
            </div>
        </div>
    </AccordionHeader>
    <AccordionBody>
        <div class="aniwari-list-detail">
            @if (Anime.EpisodesCount != null || Anime.CustomEpisodesCount != null)
            {
                (Anime as ITimeConvertible).UpdateLocalTime();

                var maxEpId = 0;

                // force custom episode count in case the user sets it
                if (Anime.CustomEpisodesCount != null)
                {
                    maxEpId = Anime.CustomEpisodesCount.Value;
                }
                else if (Anime.EpisodesCount != null) // or calculate the max episode from the aired date and schedule time
                {
                    DateTime? aired = Anime.LocalAiredDate;
                    if (aired != null)
                    {
                        // the aired date can differ with the scheduled time
                        // we need to ignore this date and find the closest next day
                        // we are assuming that the next episode airs at least after 7 next days
                        DateTime dayAfterFirstAiring = aired.Value.Date.AddDays(7);

                        while (dayAfterFirstAiring.DayOfWeek != Anime.LocalScheduleDay)
                        {
                            dayAfterFirstAiring = dayAfterFirstAiring.AddDays(1);
                        }

                        var betweenAiredToNow = DateTime.Today - dayAfterFirstAiring;
                        var daysBetween = betweenAiredToNow.TotalDays;

                        // we are still waiting for second episode
                        if (daysBetween < 0)
                        {
                            maxEpId = 2;
                        }
                        else
                        {
                            maxEpId = (int)Math.Floor(daysBetween / 7) + 3;
                        }

                        // the anime has finished airing according to the current calendar
                        if (maxEpId > Anime.EpisodesCount.Value)
                        {
                            maxEpId = Anime.EpisodesCount.Value;
                        }
                    }
                }


                foreach (int epId in Enumerable.Range(1, maxEpId))
                {
                    var ep = Anime.Episodes.FirstOrDefault(x => x.Id == epId);

                    <div class="aniwari-list-item episode @(ep?.Watched == true ? "watched" : "")">
                        <div class="episode__header">
                            <div class="episode__title">Episode @epId</div>
                            @{
                                DayOfWeek scheduleDay = DayOfWeek.Monday;
                                TimeOnly? scheduleTime = null;

                                if (SettingsService.GetStore().PreferredTime == PreferredTime.JST)
                                {
                                    scheduleDay = Anime.JSTScheduleDay;
                                    scheduleTime = Anime.JSTAirTime;
                                }
                                else if (SettingsService.GetStore().PreferredTime == PreferredTime.Local)
                                {
                                    scheduleDay = Anime.LocalScheduleDay;
                                    scheduleTime = Anime.LocalAirTime;
                                }
                            }
                            @if (scheduleTime != null && epId == maxEpId)
                            {
                                string day = scheduleDay.ToString();

                                if (scheduleDay == DateTime.Now.DayOfWeek && DateTime.Now.TimeOfDay < scheduleTime.Value.ToTimeSpan())
                                {
                                    day = "Today";
                                }

                                <div class="episode__reminder">
                                    @day at @(scheduleTime.Value.ToString("HH:mm"))
                                </div>
                            }
                        </div>

                        @if (ep != null)
                        {
                            @if (!ep.Downloaded)
                            {
                                @if (!ep.Downloading)
                                {
                                    <div class="button-wrapper button-start">
                                        @if (ep.Watched)
                                        {
                                            <button class="episode__button" @onclick="() => OnUnwatchClicked(ep)">
                                                Unwatch
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="episode__button" @onclick="() => OnWatchedClicked(epId)">
                                                Already watched
                                            </button>
                                        }
                                    </div>

                                    <div class="button-wrapper button-end">
                                        @if (ep.TorrentMagnet != null)
                                        {
                                            <button class="episode__button" @onclick="() => OnDownloadClicked(ep)" title="@(ep.TorrentTitle)">
                                                Download
                                            </button>
                                        }

                                        <button class="episode__button" @onclick="() => OnSearchClicked(epId)">
                                            Search
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        @ep.Progress
                                        %
                                    </div>
                                    <button class="episode__button" @onclick="() => OnCancelDownloadClicked(ep)">
                                        Cancel
                                    </button>
                                }
                            }
                            else
                            {
                                if (ep.Seeding)
                                {
                                    <div>
                                        @(ep.SeedRatio.ToString("0.###", System.Globalization.CultureInfo.InvariantCulture))
                                    </div>
                                }

                                <div class="button-wrapper">


                                    @if (ep.Seeding)
                                    {
                                        <button class="episode__button" @onclick="() => OnCancelSeedClicked(ep)">
                                            Stop seeding
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="episode__button" @onclick="() => OnSeedClicked(ep)">
                                            Seed
                                        </button>
                                    }

                                    @if (ep.Watched)
                                    {
                                        <button class="episode__button" @onclick="() => OnUnwatchClicked(ep)">
                                            Unwatch
                                        </button>
                                    }

                                    <button class="episode__button" @onclick="() => OnWatchClicked(ep)">
                                        Watch
                                    </button>
                                    <button class="episode__button" @onclick="() => OnDeleteClicked(ep)">
                                        Delete
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="button-wrapper button-start">
                                @if (epId != maxEpId)
                                {
                                    <button class="episode__button" @onclick="() => OnWatchedClicked(epId)">
                                        Already watched
                                    </button>
                                }
                            </div>

                            <div class="button-wrapper button-end">
                                <button class="episode__button" @onclick="() => OnSearchClicked(epId)">
                                    Search
                                </button>
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <div class="aniwari-list-item episode unknown">
                    Sorry, this anime has unknown number of episodes.
                    <br>
                    Click on the episodes counter to set the limit by yourself.
                </div>
            }
        </div>
    </AccordionBody>
</Accordion>

@code {
    public record SearchEventArgs(AniwariAnime Anime, int Episode);

    [Parameter] public AniwariAnime? Anime { get; set; }
    [Parameter] public EventCallback<SearchEventArgs> OnSearch { get; set; }

    private IJSObjectReference? module;
    private ElementReference searchStringFieldReference;
    private NumberEdit? episodesCountFieldReference;
    private bool editingSearchString = false;
    private bool editingEpisodesCount = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        module = await JS.InvokeAsync<IJSObjectReference>("import", "./Watchlist/WatchlistItem.razor.js");

        ReactTo<TorrentUpdated>(async (e) =>
        {
            if (e.AnimeId == Anime?.Id)
            {
                var episode = Anime.Episodes.FirstOrDefault(x => x.Id == e.EpisodeId);
                if (episode != null)
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        });

        ReactTo<TorrentFinished>(async (e) =>
        {
            if (e.AnimeId == Anime?.Id)
            {
                var episode = Anime.Episodes.FirstOrDefault(x => x.Id == e.EpisodeId);
                if (episode != null)
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        });

        ReactTo<TorrentErrored>(async (e) =>
        {
            if (e.AnimeId == Anime?.Id)
            {
                var episode = Anime.Episodes.FirstOrDefault(x => x.Id == e.EpisodeId);
                if (episode != null)
                {
                    await InvokeAsync(StateHasChanged);
                    // todo: show error
                }
            }
        });
    }

    private async Task OnSearchClicked(int episode)
    {
        if (OnSearch.HasDelegate && Anime != null)
            await OnSearch.InvokeAsync(new SearchEventArgs(Anime, episode));
    }

    private void OnTitleClicked()
    {
        editingSearchString = true;
    }

    private async Task OnSearchStringEditEnded()
    {
        Anime!.SearchString = await JS.InvokeAsync<string>("getElementInnerText", searchStringFieldReference);
        await SettingsService.SaveAsync();
        editingSearchString = false;
    }

    private void OnSearchStringResetClicked()
    {
        Anime!.SearchString = $"{Anime!.Title} @ep";
    }

    private async Task OnEpisodeCountEditEnded()
    {
        var content = await episodesCountFieldReference!.GetContent();
        if (string.IsNullOrWhiteSpace(content) || !int.TryParse(content, out int value) || value < 0)
        {
            await OnEpisodeCountResetClicked();
            return;
        }

        Anime!.CustomEpisodesCount = value;
        await SettingsService.SaveAsync();
        editingEpisodesCount = false;
    }

    private async Task OnEpisodeCountResetClicked()
    {
        Anime!.CustomEpisodesCount = null;
        await SettingsService.SaveAsync();
        editingEpisodesCount = false;
    }

    private async Task OnDownloadClicked(AniwariEpisode episode)
    {
        if (episode.TorrentMagnet == null)
            return;

        string archivePath = SettingsService.GetStore().ArchivePath;

        episode.Downloading = true;

        await TorrentService.DownloadAnime(Anime!.Id, episode.Id, episode.TorrentMagnet, archivePath);
    }

    private async void OnWatchClicked(AniwariEpisode episode)
    {
        if (episode.VideoFilePath == null)
            return;

        var archivePath = SettingsService.GetStore().ArchivePath;
        var videoPath = Path.Combine(archivePath, episode.VideoFilePath);

        if (File.Exists(videoPath))
        {
            using Process process = new()
                {
                    StartInfo = new(videoPath)
                    {
                        UseShellExecute = true
                    }
                };

            process.Start();
        }

        episode.Watched = true;
        await SettingsService.SaveAsync();
    }

    private async Task OnDeleteClicked(AniwariEpisode episode)
    {
        if (episode.Seeding)
        {
            await TorrentService.CancelSeed(Anime!.Id, episode.Id);
            episode.Seeding = false;
        }

        if (episode.VideoFilePath == null)
            return;

        var archivePath = SettingsService.GetStore().ArchivePath;
        var videoPath = Path.Combine(archivePath, episode.VideoFilePath);

        if (File.Exists(videoPath))
            File.Delete(videoPath);

        AnimeRepository.RemoveEpisode(Anime!, episode);
        await SettingsService.SaveAsync();
    }

    private async Task OnCancelDownloadClicked(AniwariEpisode episode)
    {
        var file = await TorrentService.CancelDownload(Anime!.Id, episode.Id);
        if (file != null)
        {
            var archivePath = SettingsService.GetStore().ArchivePath;
            var videoPath = Path.Combine(archivePath, file);

            if (File.Exists(videoPath))
                File.Delete(videoPath);
        }

        episode.Progress = 0;
        episode.Downloading = false;
        episode.Downloaded = false;
        episode.VideoFilePath = string.Empty;

        StateHasChanged();

        await SettingsService.SaveAsync();
    }

    private async Task OnCancelSeedClicked(AniwariEpisode episode)
    {
        await TorrentService.CancelSeed(Anime!.Id, episode.Id);
        episode.Seeding = false;

        StateHasChanged();

        await SettingsService.SaveAsync();
    }

    private async Task OnSeedClicked(AniwariEpisode episode)
    {
        await OnDownloadClicked(episode);
    }

    private void OnEpisodesClicked()
    {
        editingEpisodesCount = true;
    }

    private async Task OnWatchedClicked(int episode)
    {
        var ep = Anime!.Episodes.FirstOrDefault(x => x.Id == episode);
        if (ep != null)
        {
            ep.Watched = true;
        }
        else
        {
            AnimeRepository.AddEpisode(Anime!, new AniwariEpisode()
                {
                    Id = episode,
                    AnimeId = Anime!.Id,
                    Watched = true
                });
        }

        await SettingsService.SaveAsync();

        // todo: show error if unsuccessful
        if (SettingsService.GetStore().UsesMAL)
        {
            var success = await MyAnimeListService.EditAnime(Anime!.Id, Anime!.GetWatchedEpisodes().Count());

            // if we cant edit an anime, that means it doesnt exist in the list yet, so we have to add it first
            if (!success)
            {
                await MyAnimeListService.AddAnime(Anime!.Id);
                await MyAnimeListService.EditAnime(Anime!.Id, Anime!.GetWatchedEpisodes().Count());
            }
        }
    }

    private async Task OnUnwatchClicked(AniwariEpisode episode)
    {
        episode.Watched = false;
        await SettingsService.SaveAsync();

        // todo: show error if unsuccessful
        if (SettingsService.GetStore().UsesMAL)
        {
            await MyAnimeListService.EditAnime(Anime!.Id, Anime!.GetWatchedEpisodes().Count());
        }
    }
}
