@using Aniwari.Schedule;

@page "/schedule"
@inject IScheduleService ScheduleService;
@inject IJSRuntime JS
@implements IDisposable

<div class="schedule">
    @foreach (ScheduleDay day in Enum.GetValues<ScheduleDay>())
    {
        bool hasAnime = dict[day].Count > 0;

        <div class="schedule-day @(day.ToString().ToLower())">

            <div class="schedule-header">
                <div class="schedule-date">
                    <div class="schedule-date__relative-name">
                        @dateMap[day].RelativeName
                    </div>
                    <div class="schedule-date__date">
                        @dateMap[day].Date.ToString("MMM dd")
                    </div>
                </div>
                <div class="schedule-header__title">
                    @day.ToString()
                </div>
                @if (!hasAnime)
                {
                    <div class="schedule-header__noanime">
                        No anime airs on this day
                    </div>
                }
            </div>

            @if (hasAnime)
            {
                <hr class="schedule-hr" />

                <div class="schedule-day__body">
                    <Virtualize Context="anime" Items="@dict[day].OrderBy(x => x.AirTime).ToList()">
                        <AnimeRow Anime="@anime"/>
                    </Virtualize>
                </div>
            }
        </div>
    }

</div>

@code {
    private bool _disposed = false;

    private IJSObjectReference? module;

    private CancellationTokenSource cts = new();

    private Dictionary<ScheduleDay, List<AnimeSchedule>> dict = new();

    private Dictionary<ScheduleDay, WeekdayDate> dateMap = new();

    private ScheduleDay GetToday() => Enum.Parse<ScheduleDay>(DateTime.Now.DayOfWeek.ToString());

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var today = GetToday();

        foreach (ScheduleDay day in Enum.GetValues(typeof(ScheduleDay)))
        {
            dict.Add(day, new List<AnimeSchedule>());

            // the current day is today
            if (today == day)
            {
                dateMap.Add(day, new WeekdayDate("Today", DateOnly.FromDateTime(DateTime.Now)));
            }
            else
            {
                var dateDiff = day - today;
                dateMap.Add(day, new WeekdayDate("", DateOnly.FromDateTime(DateTime.Now.AddDays(dateDiff))));
            }
        }

        await foreach(var list in ScheduleService.GetSchedule(cts.Token))
        {
            foreach (var (day, anime) in list)
            {
                dict[day].Add(anime);
            }

            StateHasChanged();
        }

        if (!_disposed)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Schedule.razor.js");
            await module.InvokeVoidAsync("scrollToDay", GetToday().ToString());
        }
    }

    public void Dispose()
    {
        _disposed = true;
        cts.Cancel();
        cts.Dispose();
    }

    private record WeekdayDate(string RelativeName = "", DateOnly Date = default);
}
