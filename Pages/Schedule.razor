@page "/schedule"
@inject IScheduleService ScheduleService;
@implements IDisposable

@foreach (ScheduleDay day in Enum.GetValues<ScheduleDay>())
{
    <div class="schedule-day @(day.ToString().ToLower())">
        <div class="schedule-day__title">
            <h2>@day.ToString()</h2>
        </div>
        <div class="schedule-day__body">
            @foreach(var anime in dict[day])
            {
                <div class="schedule-item">
                    <div class="schedule-item__time">
                        @anime.AirTime
                    </div>
                    <div class="schedule-item__title">
                        @anime.GetDefaultTitle()
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private CancellationTokenSource cts = new();

    private Dictionary<ScheduleDay, List<AnimeSchedule>> dict = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        foreach (ScheduleDay day in Enum.GetValues(typeof(ScheduleDay)))
        {
            dict.Add(day, new List<AnimeSchedule>());
        }

        await foreach (var (day, anime) in ScheduleService.GetSchedule(cts.Token))
        {
            dict[day].Add(anime);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
