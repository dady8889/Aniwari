@using Aniwari.BL.Services;

@page "/settings"

@inject IJSRuntime JS
@inject ISettingsService SettingsService

@if (Store == null) return;

<div class="aniwari-content settings">
    <div class="aniwari-card">
        @foreach (var (propertyName, setting) in SettingsService.GetStore().GetSettings())
        {
            <div @key="propertyName" class="settings-item">
                <div class="settings-item__description">
                    @setting.Description
                </div>
                <div class="settings-item__control">
                    @if (propertyName == nameof(SettingsStore.ThemeColor))
                    {
                        <div class="settings-item__color">
                            <input type="color" value="@(Store.Get<string>(propertyName))"
                                @oninput="(e) => OnThemeColorChanged(e, propertyName, setting, false)"
                                @onchange="(e) => OnThemeColorChanged(e, propertyName, setting, true)" />

                            <input type="button" @onclick="async () => {
                                await OnThemeColorChanged(new ChangeEventArgs(), propertyName, setting, true);
                            }" value="Reset" />
                        </div>
                    }
                    else if (setting.Type == typeof(bool))
                    {
                        <input type="checkbox" checked="@(Store.Get<bool>(propertyName))" @onchange="async (e) => {
                            Store.Set<bool>(propertyName, (bool?)e.Value ?? false);
                            await SettingsService.SaveAsync();
                        }" />
                    }

                </div>
            </div>

            <hr>
        }

        <div class="settings-item">
            <div class="settings-item__description">
                Delete watchlist
            </div>
            <div class="settings-item__control">
                <input type="button" @onclick="async () => {
                    SettingsService.GetStore().Animes.Clear();
                    await SettingsService.SaveAsync();
                }" value="Delete" />
            </div>
        </div>
    </div>
</div>



@code {
    private SettingsStore? Store;

    private IJSObjectReference? module;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Store = SettingsService.GetStore();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Settings.razor.js");
    }

    private async Task OnThemeColorChanged(ChangeEventArgs args, string propertyName, SettingsStore.Setting setting, bool save)
    {
        string color = (string?)args.Value ?? (string)setting.DefaultValue;
        Store!.Set(propertyName, color);
        if (save)
            await SettingsService.SaveAsync();
        await JS.InvokeVoidAsync("setThemeColors", color);
    }
}
