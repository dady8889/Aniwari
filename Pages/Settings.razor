@using Aniwari.BL.Interfaces;
@using Aniwari.BL.Services;
@using Aniwari.DAL.Constants;
@using Aniwari.DAL.Storage;
@using Aniwari.Managers;
@using Aniwari.Platforms;

@page "/settings"

@inject IJSRuntime JS
@inject ISettingsService SettingsService
@inject IFolderPicker FolderPicker
@inject IThemeManager Theme

@if (Store == null) return;

<div class="aniwari-content settings">
    <div class="aniwari-card">
        @foreach (var (propertyName, setting) in SettingsService.GetStore().GetSettings())
        {
            <div @key="propertyName" class="settings-item">
                <div class="settings-item__description">
                    @setting.Description
                </div>
                <div class="settings-item__control">
                    @if (propertyName == nameof(SettingsStore.ThemeColor))
                    {
                        <div class="themecolor-wrapper">
                            <div class="accent-preview" title="Accent color">
                            </div>
                            <input type="color" value="@(Store.Get<string>(propertyName))"
                           @oninput="(e) => OnThemeColorChanged(e, propertyName, setting, false)"
                           @onchange="(e) => OnThemeColorChanged(e, propertyName, setting, true)" />

                            <button @onclick="OnThemeResetClicked">
                                Reset
                            </button>
                        </div>
                    }
                    else if (propertyName == nameof(SettingsStore.EnableDarkMode))
                    {
                        <div class="switch-wrapper">
                            <input type="checkbox" role="switch" checked="@(Store.EnableDarkMode)" @onchange="OnDarkModeChanged" />
                        </div>
                    }
                    else if (propertyName == nameof(SettingsStore.ArchivePath))
                    {
                        <div class="archivepath-wrapper">

                            <div class="archivepath__path">
                                @(EllipsePath(Store.Get<string>(propertyName) ?? ""))
                            </div>


                            <button @onclick="OnArchivePathBrowse">
                                Browse
                            </button>

                            <button @onclick="async () => {
                                        Store!.Set(setting.Type, propertyName, setting.DefaultValue);
                                        await SettingsService.SaveAsync();
                                    }">
                                Reset
                            </button>
                        </div>
                    }
                    else if (setting.Type == typeof(bool))
                    {
                        <div class="switch-wrapper">
                            <input type="checkbox" role="switch" checked="@(Store.Get<bool>(propertyName))" @onchange="async (e) => {
                                Store.Set<bool>(propertyName, (bool?)e.Value ?? false);
                                await SettingsService.SaveAsync();
                            }" />
                        </div>
                    }

                </div>
            </div>

            <hr />
        }

        <div class="settings-item">
            <div class="settings-item__description">
                Delete watchlist
            </div>
            <div class="settings-item__control">
                <button @onclick="OnDeleteWatchlistClicked">
                    Delete
                </button>
            </div>
        </div>

        <hr />

        <div class="settings-item">
            <div class="settings-item__description">
                Set default settings
            </div>
            <div class="settings-item__control">
                <button @onclick="OnRestoreClicked">
                    Restore
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private SettingsStore? Store;

    private IJSObjectReference? module;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Store = SettingsService.GetStore();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Settings.razor.js");
    }

    private async Task OnThemeColorChanged(ChangeEventArgs args, string propertyName, Setting setting, bool save)
    {
        string color = (string?)args.Value ?? (string)setting.DefaultValue;
        Store!.Set(propertyName, color);
        await Theme.SetThemeColor(JS);

        if (save)
            await SettingsService.SaveAsync();
    }

    private async Task OnThemeResetClicked()
    {
        Store!.ThemeColor = ThemeColors.LightColor;
        await Theme.SetThemeColor(JS);
    }

    private async Task OnDarkModeChanged(ChangeEventArgs args)
    {
        bool darkMode = (bool?)args.Value ?? false;
        Store!.EnableDarkMode = darkMode;

        await Theme.SetThemeColor(JS);
        await SettingsService.SaveAsync();
    }

    private async Task OnArchivePathBrowse()
    {
        var folder = await FolderPicker.PickFolder();
        if (folder != null)
        {
            Store!.Set(nameof(SettingsStore.ArchivePath), folder);
            await SettingsService.SaveAsync();
        }
    }

    private string EllipsePath(string path)
    {
        const int maxSize = 50;

        if (path.Length > maxSize)
        {
            List<string> split = path.Split('\\').ToList();
            string str = path;

            while (str.Length > maxSize && split.Count > 2)
            {
                int mid = split.Count / 2;
                split.RemoveRange(mid, 2);
                split.Insert(mid, "...");
                str = string.Join("\\", split);
            }

            return str;
        }

        return path;
    }

    private async Task OnRestoreClicked()
    {
        foreach (var (propertyName, setting) in SettingsService.GetStore().GetSettings())
        {
            Store!.Set(setting.Type, propertyName, setting.DefaultValue);
            if (propertyName == nameof(SettingsStore.ThemeColor))
            {
                await Theme.SetThemeColor(JS);
            }
        }

        await SettingsService.SaveAsync();
    }

    private async Task OnDeleteWatchlistClicked()
    {
        Store!.Animes.Clear();
        await SettingsService.SaveAsync();
    }
}
