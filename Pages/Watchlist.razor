@using Aniwari.BL.Repositories;
@using Aniwari.BL.Services;
@using Aniwari.Watchlist;

@page "/watchlist"

@inject IJSRuntime JS

@inject ISettingsService SettingsService
@inject IAnimeRepository AnimeRepository

@inherits ReactiveComponentBase

@if (Store == null) return;

<div class="aniwari-content watchlist">

    <TorrentPicker Anime="selectedAnime" Episode="selectedEpisode" OnTorrentSelected="OnTorrentSelected" />

    <div class="aniwari-card @(torrentPickerShown)">
        @{
            var lastAnime = watchingAnime.LastOrDefault();
        }

        @if (lastAnime == null)
        {
            <div class="aniwari-list-item watchlist-item noanime">You are not watching any anime</div>
        }
        else
        {
            <Virtualize Context="anime" Items="watchingAnime">

                <WatchlistItem Anime="anime" OnSearch="SearchAnime" />

                @if (anime != lastAnime)
                {
                    <hr>
                }
            </Virtualize>
        }
    </div>
</div>

@code {

    private SettingsStore? Store;
    private List<SettingsStore.Anime> watchingAnime = new();
    private int savedScroll = 0;
    private SettingsStore.Anime? selectedAnime = null;
    private int? selectedEpisode = null;

    private string torrentPickerShown => selectedAnime != null ? "hidden" : "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Store = SettingsService.GetStore();
        watchingAnime = Store.Animes.Where(x => x.Watching).ToList();
    }

    private async Task SearchAnime(WatchlistItem.SearchEventArgs args)
    {
        savedScroll = await JS.InvokeAsync<int>("getDocumentScrollTop");
        selectedAnime = args.Anime;
        selectedEpisode = args.Episode;
    }

    private async Task OnTorrentSelected(TorrentPicker.TorrentSelectedEventArgs args)
    {
        selectedAnime = null;
        selectedEpisode = null;
        StateHasChanged();
        await Task.Delay(150);
        await JS.InvokeVoidAsync("setDocumentScrollTop", savedScroll, true);
        savedScroll = 0;

        if (!args.Canceled)
        {
            AnimeRepository.AddEpisode(args.Anime, new SettingsStore.Episode()
                {
                    Id = args.Episode,
                    TorrentMagnet = args.Magnet,
                    TorrentTitle = args.Title,
                });
        }
    }
}