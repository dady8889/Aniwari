@using Aniwari.BL.Services;

@inject INyaaService NyaaService

@if (Torrents == null) return;

<button class="return-button" @onclick="() => OnSelectClicked(null)">
    Return
</button>

<div class="aniwari-card">

    @{
        var lastTorrent = Torrents.LastOrDefault();
    }

    @if (lastTorrent == null)
    {
        <div class="aniwari-list-item">
            <div class="torrent-picker-item__name">
                No results found
            </div>
        </div>
    }
    else
    {
        @foreach (var torrent in Torrents)
        {
            <div class="aniwari-list-item">

                <div class="torrent-picker-item__name">
                    @torrent.Name
                </div>

                <div class="torrent-info-wrapper">
                    <div class="seeders">
                        @torrent.Seeders
                    </div>

                    <button class="torrent-picker-item__select" @onclick="() => OnSelectClicked(torrent)">
                        Select
                    </button>
                </div>

            </div>
        }
    }
</div>

@code {
    public record TorrentSelectedEventArgs(SettingsStore.Anime Anime, int Episode, bool Canceled, string Title, string Magnet);

    [Parameter] public SettingsStore.Anime? Anime { get; set; }
    [Parameter] public int? Episode { get; set; }
    [Parameter] public EventCallback<TorrentSelectedEventArgs> OnTorrentSelected { get; set; }

    public List<NyaaAnime>? Torrents { get; private set; } = null;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Anime == null || Episode == null)
            return;

        string searchString = Anime.SearchString
        .Replace("@ep", $"{Episode:D2}")
        .Replace("@EP", $"{Episode}");

        Torrents = await NyaaService.GetAnime(searchString);
    }

    private async Task OnSelectClicked(NyaaAnime? torrent)
    {
        if (OnTorrentSelected.HasDelegate)
        {
            TorrentSelectedEventArgs args;

            if (torrent != null)
            {
                args = new TorrentSelectedEventArgs(Anime!, Episode!.Value, false, torrent.Name, torrent.Magnet);
            }
            else
            {
                args = new TorrentSelectedEventArgs(Anime!, Episode!.Value, true, "", "");
            }
            
            await OnTorrentSelected.InvokeAsync(args);
        }
        
        Torrents = null;
    }
}