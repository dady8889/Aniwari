@using Aniwari.BL.Repositories;
@using Aniwari.BL.Services;
@using System.Diagnostics;

@inherits ReactiveComponentBase

@inject IJSRuntime JS
@inject ISettingsService SettingsService
@inject ITorrentService TorrentService
@inject IAnimeRepository AnimeRepository

@if (Anime == null) return;

<Accordion @key="Anime.Id" PreventExpanding="editSearchString">
    <AccordionHeader>
        <div class="aniwari-list-item watchlist-item @(context.Expanded ? "expanded" : "")">
            @if (!editSearchString)
            {
                <div class="title-wrapper">
                    <div class="title" title="@Anime.SearchString">
                        @Anime.Title
                    </div>
                    <button class="title-button" @onclick:stopPropagation="true" @onclick="OnTitleClicked">
                        Edit
                    </button>
                </div>
            }
            else
            {
                <div class="title-wrapper">
                    <span @ref="searchStringFieldReference" class="searchstring-field" @onclick:stopPropagation="true" contenteditable="true">
                        @Anime.SearchString
                    </span>
                    <button class="title-button" @onclick:stopPropagation="true" @onclick="OnEditEnded">
                        Save
                    </button>
                </div>
            }
            <div class="episodes-counter">
                <div>
                    @Anime.GetWatchedEpisodes().Count()
                </div>
                <div>
                    /
                </div>
                <div>
                    @(Anime.EpisodesCount?.ToString() ?? "?")
                </div>
            </div>
        </div>
    </AccordionHeader>
    <AccordionBody>
        <div class="aniwari-list-detail">
            @if (Anime.EpisodesCount != null)
            {
                @foreach (int epId in Enumerable.Range(1, Anime.EpisodesCount.Value))
                {
                    <div class="aniwari-list-item episode">
                        <div class="episode__title">Episode @epId</div>

                        @{
                            var ep = Anime.Episodes.FirstOrDefault(x => x.Id == epId);
                        }

                        @if (ep != null)
                        {
                            @if (!ep.Downloaded)
                            {
                                @if (!ep.Downloading)
                                {
                                    <button class="episode__button" @onclick="() => OnDownloadClicked(ep)">
                                        Download
                                    </button>
                                }
                                else
                                {
                                    <div class="episode__progress">
                                        @ep.Progress
                                        %
                                    </div>
                                }
                            }
                            else
                            {
                                <div>
                                    <button class="episode__button" @onclick="() => OnWatchClicked(ep)">
                                        Watch
                                    </button>
                                    <button class="episode__button" @onclick="() => OnDeleteClicked(ep)">
                                        Delete
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <button class="episode__button" @onclick="() => OnSearchClicked(epId)">
                                Search
                            </button>
                        }
                    </div>
                }
            }
        </div>
    </AccordionBody>
</Accordion>

@code {
    public record SearchEventArgs(SettingsStore.Anime Anime, int Episode);

    [Parameter] public SettingsStore.Anime? Anime { get; set; }
    [Parameter] public EventCallback<SearchEventArgs> OnSearch { get; set; }

    private IJSObjectReference? module;
    private ElementReference searchStringFieldReference;
    private bool editSearchString = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        module = await JS.InvokeAsync<IJSObjectReference>("import", "./Watchlist/WatchlistItem.razor.js");
    }

    private async Task OnSearchClicked(int episode)
    {
        if (OnSearch.HasDelegate && Anime != null)
            await OnSearch.InvokeAsync(new SearchEventArgs(Anime, episode));
    }

    private void OnTitleClicked()
    {
        editSearchString = true;
    }

    private async Task OnEditEnded()
    {
        Anime!.SearchString = await JS.InvokeAsync<string>("getElementInnerText", searchStringFieldReference);
        await SettingsService.SaveAsync();
        editSearchString = false;
    }

    private async Task OnDownloadClicked(SettingsStore.Episode episode)
    {
        string archivePath = SettingsService.GetStore().ArchivePath;

        episode.Downloading = true;

        await TorrentService.DownloadMagnet(episode.TorrentMagnet, archivePath,
            (progress) =>
            {
                if (episode.Progress != (int)progress)
                {
                    episode.Progress = (int)progress;
                    InvokeAsync(StateHasChanged);
                }
            },
            async (file) =>
            {
                episode.Downloading = false;
                episode.Downloaded = true;
                episode.VideoFilePath = file;
                await SettingsService.SaveAsync();
                await InvokeAsync(StateHasChanged);
            });
    }

    private void OnWatchClicked(SettingsStore.Episode episode)
    {
        var archivePath = SettingsService.GetStore().ArchivePath;
        var videoPath = Path.Combine(archivePath, episode.VideoFilePath);

        if (File.Exists(videoPath))
        {
            using Process process = new()
                {
                    StartInfo = new(videoPath)
                    {
                        UseShellExecute = true
                    }
                };

            process.Start();
        }
    }

    private async Task OnDeleteClicked(SettingsStore.Episode episode)
    {
        try
        {
            var archivePath = SettingsService.GetStore().ArchivePath;
            var videoPath = Path.Combine(archivePath, episode.VideoFilePath);

            if (File.Exists(videoPath))
            {
                File.Delete(videoPath);
                AnimeRepository.RemoveEpisode(Anime!, episode);
                await SettingsService.SaveAsync();
            }
        }
        catch (Exception ex)
        {

        }
    }
}
